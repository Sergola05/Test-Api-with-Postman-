{
  "info": {
    "name": "My API Testing Collection (fixed)",
    "_postman_id": "api-collection-fixed",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Login returns tokens\", () => { pm.expect(body).to.be.an(\"object\"); pm.expect(body).to.have.property(\"access_token\"); pm.expect(body).to.have.property(\"refresh_token\"); });",
                  "pm.test(\"Save tokens\", () => { pm.environment.set(\"auth_token\", body.access_token); pm.environment.set(\"refresh_token\", body.refresh_token); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token - \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Refresh returns tokens\", () => { pm.expect(body).to.be.an(\"object\"); pm.environment.set(\"auth_token\", body.access_token); pm.environment.set(\"refresh_token\", body.refresh_token); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout - \u0438\u043d\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users (\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&pageSize=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users?page=1&pageSize=10"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is JSON array\", () => { pm.expect(body).to.not.equal(null); pm.expect(Array.isArray(body)).to.be.true; });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200 or 404\", () => pm.expect([200,404]).to.include(pm.response.code));",
                  "if (pm.response.code === 200) { pm.test(\"User object structure\", () => { [\"id\",\"name\",\"email\",\"createdAt\"].forEach(k => pm.expect(body).to.have.property(k)); }); }"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test.user@example.com\",\n  \"role\": \"user\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Save user_id\", () => pm.environment.set(\"user_id\", body.id));"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated User\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Updated user structure\", () => { [\"id\",\"name\",\"email\",\"createdAt\"].forEach(k => pm.expect(body).to.have.property(k)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 204\", () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get Products (\u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products?category=Peripherals&minPrice=10&maxPrice=100&search=o",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "products?category=Peripherals&minPrice=10&maxPrice=100&search=o"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is JSON array\", () => { pm.expect(body).to.not.equal(null); pm.expect(Array.isArray(body)).to.be.true; });"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/products",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "products"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Monitor\",\n  \"category\": \"Displays\",\n  \"price\": 199.99\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Save product_id\", () => pm.environment.set(\"product_id\", body.id));"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "products",
                "{{product_id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 149.99\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/orders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "orders"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{user_id}},\n  \"items\": [\n    { \"productId\": {{product_id}}, \"quantity\": 2 }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 201\", () => pm.response.to.have.status(201));",
                  "pm.test(\"Save order_id\", () => pm.environment.set(\"order_id\", body.id));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/orders",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "orders"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Inject Bearer token once",
                  "const token = pm.environment.get(\"auth_token\");",
                  "if (token) {",
                  "  pm.request.headers.remove('Authorization');",
                  "  pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ===== Helpers (safe JSON parsing) =====",
                  "function hasBody() { const t = (pm.response.text()||'').trim(); return t.length > 0; }",
                  "function isJson() { const ct = pm.response.headers.get('Content-Type')||''; return ct.includes('application/json'); }",
                  "function jsonOrNull() {",
                  "  if (hasBody() && isJson()) {",
                  "    try { return pm.response.json(); } catch (e) {",
                  "      pm.test('Body is valid JSON', function () { throw e; });",
                  "    }",
                  "  }",
                  "  return null;",
                  "}",
                  "const body = jsonOrNull();",
                  "pm.test(\"Response time < 1000ms\", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });",
                  "pm.test(\"Content-Type present when body exists\", function () { if (hasBody()) pm.response.to.have.header(\"Content-Type\"); });",
                  "",
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Response is JSON array\", () => { pm.expect(body).to.not.equal(null); pm.expect(Array.isArray(body)).to.be.true; });"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}